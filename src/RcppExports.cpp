// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// decode
NumericMatrix decode(SEXP encoded);
RcppExport SEXP _flexpolyline_decode(SEXP encodedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type encoded(encodedSEXP);
    rcpp_result_gen = Rcpp::wrap(decode(encoded));
    return rcpp_result_gen;
END_RCPP
}
// encode
String encode(NumericMatrix line, int precision, int third_dim, int third_dim_precision);
RcppExport SEXP _flexpolyline_encode(SEXP lineSEXP, SEXP precisionSEXP, SEXP third_dimSEXP, SEXP third_dim_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type line(lineSEXP);
    Rcpp::traits::input_parameter< int >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< int >::type third_dim(third_dimSEXP);
    Rcpp::traits::input_parameter< int >::type third_dim_precision(third_dim_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(encode(line, precision, third_dim, third_dim_precision));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flexpolyline_decode", (DL_FUNC) &_flexpolyline_decode, 1},
    {"_flexpolyline_encode", (DL_FUNC) &_flexpolyline_encode, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_flexpolyline(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
