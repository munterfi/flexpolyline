// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cpp_decode
NumericMatrix cpp_decode(String encoded);
RcppExport SEXP _flexpolyline_cpp_decode(SEXP encodedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type encoded(encodedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_decode(encoded));
    return rcpp_result_gen;
END_RCPP
}
// cpp_encode
String cpp_encode(NumericMatrix line, int precision);
RcppExport SEXP _flexpolyline_cpp_encode(SEXP lineSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type line(lineSEXP);
    Rcpp::traits::input_parameter< int >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_encode(line, precision));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flexpolyline_cpp_decode", (DL_FUNC) &_flexpolyline_cpp_decode, 1},
    {"_flexpolyline_cpp_encode", (DL_FUNC) &_flexpolyline_cpp_encode, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_flexpolyline(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
